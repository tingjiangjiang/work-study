mongodb的服务器启动指令:
>mongod --dbpath 文件夹路径

mongodb的客户端使用命令：
>mongo
注意：通过mongo命令只是连接上了数据库服务器，数据库服务器上还有很多数据库，我们真正要操作的是这些数据库。

数据库->集合->数据

show dbs : 列出当前所有数据库,默认列出（admin，config和local三个数据库），都是默认的，不要删除和修改。

db : 显示当前正在操作的数据库(默认是test，为什么test没有在show dbs命令中显示呢？因为当前test数据库里面还没有数据)

/***数据库操作***/
use : 如果数据库存在则切换到当前数据库，如果不存在则创建，例如：use student

db.dropDatabase() : 删除数据库(需要使用use先切换到被删除的数据库上)


/***集合操作***/
db.createCollection('集合名字') : 创建一个集合

show collections : 显示当前数据库的集合列表
db.集合名.drop() : 删除指定集合

/***C【create】R【read】U【update】D【delte】（增删改查）***/

1、新增操作

db.集合名.insert({/*json数据*/}),示例：db.movie.insert({name:'zs',age:10})
db.集合名.insert([{/*json数据*/},{/*json数据*/},...]),新增多条记录
示例：db.movie.insert([{name:'wangwu'},{name:'lisi'}])

db.集合名.insertOne({/*json数据*/}),示例：db.movie.insertOne({name:'zhaoliu'})
db.集合名.insertMany([{/*json数据*/},{...},...]),示例：db.movie.insertMany([{name:'sunqi'},{name:'qianba'}])



2、查询操作

db.集合名.find(),示例：db.movie.find()

db.集合名.find().pretty(),示例：db.movie.find().pretty();pretty()没有实际的含义，仅在命令行或查询客户端中可用，在代码中不可用

//带条件的查询语句

db.film.find() 等价于 db.film.find({})

db.film.find({name:'lisi'}) //查询film集合中name等于lisi的数据

//且操作

db.film.find({name:'lisi',age:20}) // 查询film集合中name等于lisi 且 age等于20的数据，如果不存在则没有返回。

//或操作

db.film.find({$or:[{name:'lisi',age:25},{name:'wangwu'}]})

//非操作($ne not equa)

db.film.find({name:{$ne:'lisi'}}) //查询film集合中name不等于lisi的数据

// $in

db.film.find({age:{$in:[20,30,40]}}) // 查询film集合中age在[20,30,40]集合中的数据，注意不是在20~40这个区间

// 大于操作($gt great than)

db.film.find({age:{$gt:20}}) //查询年龄大于20岁的

// 大于等于操作($gte great than equa)

db.film.find({age:{$gte:20}}) //查询年龄大于等于20岁的

// 小于操作($lt less than)

db.film.find({age:{$lt:20}}) //查询年龄小于20岁的

// 小于等于操作($lte less than)

db.film.find({age:{$lte:20}})  //查询年龄小于等于20岁的


// 排序

db.film.find().sort({age:-1}).pretty() // 按照年龄的降序排序，如果为 1 表示按照年龄的升序排序

db.film.find().sort({age:-1，name:-1}).pretty() //多排序条件的情况 ,当第一排序条件age无法筛选数据的时候，会根据第二排序条件name再排

任务：字符串数字排序,比如['1','2','3','10','11','20']

// 分页

page	1	2	3
skip	0	3	6

公式：(page-1)*3


db.film.find().skip(0).limit(3).pretty();	// 从0开始查询查3条,不包括0,显示第1 2 3条数据
db.film.find().skip(3).limit(3).pretty();	// 从3开始查询查3条
db.film.find().skip(6).limit(3).pretty();	// 从6开始查询查3条




3、更新操作

db.集合名.update({查询条件},{$set:{修改内容}}),示例：db.movie.update({name:'zhangsan'},{$set:{age:20}});解释：查询name等于张三的数据，把该条数据的age修改为20;注意：update只修改满足查询条件的第一条数据(比如name=zhangsan的人有很多，但是只修改第一条)


db.集合名.updateMany({查询条件},{$set:{修改内容}}),用来修改所有满足查询条件的数据

db.集合名.updateOne({查询条件},{$set:{修改内容}}),用来修改所有满足查询条件的第一条数据
ObjectId("5d846a006902035830294317")

db.movie.update({'_id':ObjectId("5d846a006902035830294317")},{$set:{age:88}})//根据id来修改


$currentDate：给字段添加当前时间, 示例：db.film.update({'name':'zhangsan'},{$currentDate:{lastModify:true}}) // true表示添加当

前时间

$inc(加减操作) ：修改Number字段的值，示例：db.film.update({'name':'zhangsan'},{$inc:{age:1}}) //当前age加1，如果是-1表示当前age减1

$mul(乘法操作) ：修改Number字段的值，示例：db.film.update({'name':'zhangsan'},{$mul:{age:2}}) //当前age乘以2 

$min(给定值小于已有值才更新，否则不更新)

$max(给定值大于已有值才更新，否则不更新)

$rename（修改字段的名称）,示例：db.film.update({name:'zhangsan'},{$rename:{title:'brand'}})  // 修改后的数据不再有title字段，被改成了brand字段

$unset(删除字段),db.film.update({name:'zhangsan'},{$unset:{brand:''}}) //执行后brand字段和其内容就被删除了

修改数组的操作:

$push（新增一个可以重复数组元素）,示例:db.film.update({name:'zhangsan'},{$push:{title:'阿里巴巴董事局主席'}}) // 如果title字段不存在则新增该字段，且该字段为数组，内容为['阿里巴巴董事局主席'];$push已有字段的时候，该字段需要是数组才行，否则报错。

$addToSet(新增一个不重复的数组元素，用法和$push一样)


$pop(删除一个数组元素),示例：db.film.update({name:'zhangsan'},{$pop:{title:1}}) // 从title数组中删除，1表示从尾部删除，-1表示从头部删除，0表示不删除

$pull(删除指定的值)，示例：db.film.update({name:'zhangsan'},{$pull:{car:'BMW'}}); // 把car数组中所有内容为BMW的元素删除

$（数组定位器）,示例：db.film.update({name:'zhangsan'},{$set:{'car.0':'BMW'}}); //把car数组中的第0个元素内容修改为BMW；db.film.update({name:'zhangsan'},{$set:{'car.1':'BMW'}}) //把car数组中的第1个元素内容修改为BMW



4、删除操作

db.集合名.remove({查询条件}),示例：db.movie.remove({name:'zhangsan'})//删除所有满足条件的数据

db.集合名.deleteOne({查询条件}),示例：db.movie.deleteOne({name:'zhangsan'})//删除满足条件的第一个数据

db.集合名.deleteMany({查询条件}),示例：db.movie.deleteMany({name:'zhangsan'})//删除所有满足条件的数据



什么是数据库？

存储数据的容器，比如txt文档，json文件，xml文件，word，excel，mysql，oracle，mongodb，redis，sqlite，office access，office VF，sqlserver，db2；

专业数据库存储软件：mysql,oracle,sqlserver,db2，mongodb；

常规使用的关系型数据库：mysql,oracle,sqlserver;这些数据库的语法统一遵循使用sql语法

为什么是关系型数据库？

	举一个例子：需要给中公教育做一套软件，这套软件就需要数据库去存储数据；比如要存储：员工信息（工号，姓名，年龄，生日），员工考勤（工号，迟到，早退，请假，旷工），部门信息（部门名称，部门人员），工资表（底薪，绩效，提成，考勤扣款，加班费）

	关系型数据库需要提前定义好数据结构(表结构);数据如果不符合数据结构的特征会无法存储或报错（比如：数据库定义了：工号，姓名和年龄，但是实际数据是：地址，爱好等操作，这是无法存储的）

非关系型数据库:

	一般的非关系型数据库都是NoSql（不需要sql语法，一般都是实体对象，通过使用对象的属性或方法来操作数据），非关系数据库往往不需要提前定义数据结构。以mongodb来说，存储数据的时候使用的是类似json形式的bson，比如：[{name:'zhangsan',age:22},{hobby:'打篮球',eat:'吃遍大江南北'},{shopping:'淘宝'}]

一般在设计的时候需要专门给一台数据库服务器。建立一个公司的服务器结构需要很多服务器（逻辑处理服务器，视频处理服务器，文件服务器，数据库服务器）

常规的数据使用一般可以分为：关系型数据和非关系型数据库(NoSql)




